---
/**
 * Temporal Analysis Chart - Shows violation patterns by hour and day
 * Key visualization for "Rolling Study Hall" narrative
 */
import type { HourlyData } from '../../scripts/data-processing/csv-loader.ts';

export interface Props {
  data?: HourlyData[];
  highlightStudentHours?: boolean;
  interactive?: boolean;
  className?: string;
}

const {
  data = [],
  highlightStudentHours = true,
  interactive = true,
  className = "",
} = Astro.props;

const chartId = "temporal-violations";
const studentHours = [7, 8, 9, 10]; // Peak student commute hours

// Process data for visualization
const dayOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
const processedData = data.length > 0 ? data : [];

// Create data table for accessibility
const tableData = processedData.reduce((acc, item) => {
  if (!acc[item.weekday]) {
    acc[item.weekday] = {};
  }
  acc[item.weekday][item.hour] = item.violations;
  return acc;
}, {} as Record<string, Record<number, number>>);
---

<div class={`temporal-chart ${className}`}>
  <div class="mb-4">
    <h3 class="text-lg font-semibold text-gray-800 mb-2">When Student Commutes Are Most Disrupted</h3>
    <p class="text-sm text-gray-600">Bus lane violations by hour of day and day of week. Peak violations occur during morning student commute hours (7-10 AM).</p>
  </div>
  <div id="temporal-heatmap" class="heatmap-container">
    <!-- Fallback message for no-JS -->
    <noscript>
      <p>This interactive heatmap shows when bus violations most impact student commutes. Enable JavaScript for the full experience.</p>
    </noscript>
  </div>

  <!-- Accessible data table -->
  <Fragment slot="table">
    <table class="data-table">
      <caption>Violations by Hour and Day of Week</caption>
      <thead>
        <tr>
          <th scope="col">Day</th>
          {Array.from({length: 24}, (_, i) => (
            <th
              scope="col"
              class={highlightStudentHours && studentHours.includes(i) ? 'student-hour' : ''}
            >
              {i}:00
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {dayOrder.map(day => (
          <tr key={day}>
            <th scope="row">{day}</th>
            {Array.from({length: 24}, (_, hour) => (
              <td
                class={highlightStudentHours && studentHours.includes(hour) ? 'student-hour' : ''}
              >
                {tableData[day]?.[hour] || 0}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  </Fragment>

  <!-- Interactive controls -->
  <Fragment slot="controls">
    <div class="chart-filters">
      <label class="filter-label">
        <input
          type="checkbox"
          id="highlight-student-hours"
          checked={highlightStudentHours}
          data-filter="student-hours"
        />
        Highlight Student Commute Hours (7-10 AM)
      </label>

      <fieldset class="day-filter">
        <legend>Show Days:</legend>
        <label><input type="checkbox" value="weekdays" checked /> Weekdays</label>
        <label><input type="checkbox" value="weekends" checked /> Weekends</label>
      </fieldset>
    </div>

    <div class="chart-legend">
      <div class="legend-item">
        <span class="legend-color" style="background-color: #2563eb;"></span>
        Low Violations (&lt;1000)
      </div>
      <div class="legend-item">
        <span class="legend-color" style="background-color: #dc2626;"></span>
        High Violations (&gt;5000)
      </div>
      {highlightStudentHours && (
        <div class="legend-item">
          <span class="legend-color student-highlight"></span>
          Student Commute Hours
        </div>
      )}
    </div>
  </Fragment>
</div>

<style>
  .temporal-chart {
    --student-highlight: #fbbf24;
  }

  .heatmap-container {
    width: 100%;
    height: 400px;
    position: relative;
  }

  /* Data table styles */
  .data-table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
    font-size: 0.9rem;
  }

  .data-table th,
  .data-table td {
    padding: 0.5rem;
    text-align: center;
    border: 1px solid var(--color-border);
  }

  .data-table th {
    background-color: var(--color-gray-100);
    font-weight: 600;
  }

  .data-table th[scope="row"] {
    text-align: left;
    background-color: var(--color-gray-50);
  }

  .data-table .student-hour {
    background-color: rgba(251, 191, 36, 0.2);
    font-weight: 600;
  }

  /* Chart controls */
  .chart-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .filter-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
  }

  .day-filter {
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 0.5rem;
  }

  .day-filter legend {
    font-weight: 600;
    padding: 0 0.5rem;
  }

  .day-filter label {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-right: 1rem;
  }

  /* Legend */
  .chart-legend {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .legend-color {
    width: 16px;
    height: 16px;
    border-radius: 2px;
  }

  .legend-color.student-highlight {
    background-color: var(--student-highlight);
    border: 2px solid #92400e;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .heatmap-container {
      height: 300px;
    }

    .data-table {
      font-size: 0.8rem;
    }

    .data-table th,
    .data-table td {
      padding: 0.25rem;
    }

    .chart-filters {
      flex-direction: column;
    }
  }
</style>

<script>
  class TemporalChart {
    constructor(container) {
      this.container = container;
      this.data = [];
      this.config = {
        highlightStudentHours: true,
        showWeekdays: true,
        showWeekends: true,
      };
      this.init();
    }

    async init() {
      await this.loadData();
      this.render();
      this.attachEventListeners();
    }

    async loadData() {
      try {
        const response = await fetch('/data/insights/hourly_agg.csv');
        const csvText = await response.text();
        this.data = this.parseCSV(csvText);
        console.log('Temporal data loaded:', this.data.length, 'records');
      } catch (error) {
        console.error('Failed to load temporal data:', error);
      }
    }

    parseCSV(csvText) {
      const lines = csvText.trim().split('\n');
      const headers = lines[0].split(',').map(h => h.trim());
      
      return lines.slice(1).map(line => {
        const values = line.split(',').map(v => v.trim());
        const row = headers.reduce((obj, header, index) => {
          obj[header] = values[index];
          return obj;
        }, {});
        
        return {
          weekday: row.weekday || '',
          hour: parseInt(row.hour) || 0,
          violations: parseInt(row.violations) || 0,
        };
      }).filter(Boolean);
    }

    render() {
      if (this.data.length === 0) return;

      // Create D3.js heatmap visualization
      const margin = { top: 50, right: 80, bottom: 60, left: 120 };
      const width = this.container.clientWidth - margin.left - margin.right;
      const height = 400 - margin.top - margin.bottom;

      // Clear previous visualization
      this.container.innerHTML = '';

      // Create SVG
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('width', (width + margin.left + margin.right).toString());
      svg.setAttribute('height', (height + margin.top + margin.bottom).toString());
      svg.setAttribute('role', 'img');
      svg.setAttribute('aria-label', 'Heatmap showing violation patterns by hour and day');

      const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      g.setAttribute('transform', `translate(${margin.left},${margin.top})`);
      svg.appendChild(g);

      // Process data for heatmap
      const dayOrder = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
      const hours = Array.from({length: 24}, (_, i) => i);

      // Create scales
      const xScale = (hour: number) => (hour * width) / 24;
      const yScale = (dayIndex: number) => (dayIndex * height) / 7;
      const cellWidth = width / 24;
      const cellHeight = height / 7;

      // Create color scale
      const maxViolations = Math.max(...this.data.map(d => d.violations));
      const getColor = (violations: number) => {
        const intensity = violations / maxViolations;
        return `rgba(37, 99, 235, ${intensity})`;
      };

      // Create heatmap cells
      dayOrder.forEach((day, dayIndex) => {
        hours.forEach(hour => {
          const dataPoint = this.data.find(d => d.weekday === day && d.hour === hour);
          const violations = dataPoint?.violations || 0;

          const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
          rect.setAttribute('x', xScale(hour).toString());
          rect.setAttribute('y', yScale(dayIndex).toString());
          rect.setAttribute('width', cellWidth.toString());
          rect.setAttribute('height', cellHeight.toString());
          rect.setAttribute('fill', getColor(violations));
          rect.setAttribute('stroke', '#fff');
          rect.setAttribute('stroke-width', '1');

          // Add student hour highlighting
          if (this.config.highlightStudentHours && [7, 8, 9, 10].includes(hour)) {
            rect.setAttribute('stroke', '#fbbf24');
            rect.setAttribute('stroke-width', '3');
          }

          // Add tooltip
          const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
          title.textContent = `${day} ${hour}:00 - ${violations} violations`;
          rect.appendChild(title);

          g.appendChild(rect);
        });
      });

      // Add axis labels
      this.addAxes(g, dayOrder, hours, width, height);

      this.container.appendChild(svg);
    }

    addAxes(g, days, hours, width, height) {
      // Y-axis (days)
      days.forEach((day, i) => {
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', '-10');
        text.setAttribute('y', (i * height / 7 + height / 14).toString());
        text.setAttribute('text-anchor', 'end');
        text.setAttribute('dominant-baseline', 'central');
        text.setAttribute('fill', 'var(--color-text-primary)');
        text.textContent = day.slice(0, 3); // Abbreviate for mobile
        g.appendChild(text);
      });

      // X-axis (hours) - show every 4th hour for readability
      hours.filter((_, i) => i % 4 === 0).forEach(hour => {
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', (hour * width / 24 + width / 48).toString());
        text.setAttribute('y', (height + 20).toString());
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('fill', 'var(--color-text-primary)');
        text.textContent = `${hour}:00`;
        g.appendChild(text);
      });
    }

    attachEventListeners() {
      // Student hours toggle
      const studentHoursToggle = document.getElementById('highlight-student-hours');
      studentHoursToggle?.addEventListener('change', (e) => {
        this.config.highlightStudentHours = e.target.checked;
        this.render();
      });

      // Day filters
      const dayFilters = document.querySelectorAll('.day-filter input[type="checkbox"]');
      dayFilters.forEach(filter => {
        filter.addEventListener('change', () => {
          this.updateDayFilters();
        });
      });
    }

    updateDayFilters() {
      const weekdaysChecked = document.querySelector('.day-filter input[value="weekdays"]')?.checked;
      const weekendsChecked = document.querySelector('.day-filter input[value="weekends"]')?.checked;

      this.config.showWeekdays = weekdaysChecked;
      this.config.showWeekends = weekendsChecked;

      // Re-render with filtered data
      this.render();
    }
  }

  // Initialize chart when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('temporal-heatmap');
    if (container) {
      new TemporalChart(container);
    }
  });
</script>