---
/**
 * Media Gallery Component for ClearLane Initiative
 * Responsive gallery with lightbox and keyboard navigation
 */

export interface MediaItem {
  src: string;
  alt: string;
  caption?: string;
  thumbnail?: string;
  type?: 'image' | 'video';
  width?: number;
  height?: number;
}

export interface Props {
  items: MediaItem[];
  columns?: 'auto' | 1 | 2 | 3 | 4;
  gap?: 'sm' | 'md' | 'lg';
  aspectRatio?: '16:9' | '4:3' | '1:1' | '3:2' | 'auto';
  lightbox?: boolean;
  lazy?: boolean;
  class?: string;
}

const {
  items = [],
  columns = 'auto',
  gap = 'md',
  aspectRatio = '4:3',
  lightbox = true,
  lazy = true,
  class: className = ''
} = Astro.props;

const columnClasses = {
  'auto': 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
  1: 'grid-cols-1',
  2: 'grid-cols-1 sm:grid-cols-2',
  3: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
};

const gapClasses = {
  sm: 'gap-2',
  md: 'gap-4',
  lg: 'gap-6'
};

const aspectRatioClasses = {
  '16:9': 'aspect-video',
  '4:3': 'aspect-4/3',
  '1:1': 'aspect-square',
  '3:2': 'aspect-3/2',
  'auto': ''
};
---

<div class={`media-gallery ${className}`}>
  <!-- Gallery Grid -->
  <div class={`grid ${columnClasses[columns]} ${gapClasses[gap]}`}>
    {items.map((item, index) => (
      <div
        class={`relative overflow-hidden rounded-lg bg-gray-100 cursor-pointer group ${aspectRatio !== 'auto' ? aspectRatioClasses[aspectRatio] : ''}`}
        data-gallery-item={index}
        role="button"
        tabindex="0"
        aria-label={`View ${item.alt}${item.caption ? ` - ${item.caption}` : ''}`}
      >
        <!-- Image/Video Content -->
        {item.type === 'video' ? (
          <video
            src={item.src}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            muted
            loop
            playsinline
            poster={item.thumbnail}
            preload="metadata"
          >
            <track kind="captions" label="Video description" />
          </video>
        ) : (
          <img
            src={item.thumbnail || item.src}
            alt={item.alt}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading={lazy ? 'lazy' : 'eager'}
            width={item.width}
            height={item.height}
          />
        )}

        <!-- Overlay -->
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center">
          <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
            </svg>
          </div>
        </div>

        <!-- Video Play Button -->
        {item.type === 'video' && (
          <div class="absolute inset-0 flex items-center justify-center pointer-events-none">
            <div class="w-16 h-16 bg-white bg-opacity-90 rounded-full flex items-center justify-center shadow-lg">
              <svg class="w-8 h-8 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z" />
              </svg>
            </div>
          </div>
        )}

        <!-- Caption Preview -->
        {item.caption && (
          <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4 text-white text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <p class="line-clamp-2">{item.caption}</p>
          </div>
        )}
      </div>
    ))}
  </div>

  <!-- Lightbox Modal -->
  {lightbox && (
    <div
      id="lightbox-modal"
      class="fixed inset-0 z-50 hidden bg-black bg-opacity-90 backdrop-blur-sm"
      role="dialog"
      aria-modal="true"
      aria-hidden="true"
    >
      <!-- Close Button -->
      <button
        id="lightbox-close"
        class="absolute top-4 right-4 z-60 p-2 text-white hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-white rounded-lg"
        aria-label="Close lightbox"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <!-- Navigation Buttons -->
      <button
        id="lightbox-prev"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 z-60 p-2 text-white hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Previous image"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <button
        id="lightbox-next"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 z-60 p-2 text-white hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Next image"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Content Container -->
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="max-w-7xl max-h-full">
          <!-- Media Content -->
          <div id="lightbox-content" class="relative">
            <!-- Dynamic content will be inserted here -->
          </div>

          <!-- Caption -->
          <div id="lightbox-caption" class="mt-4 text-center text-white text-lg hidden">
            <!-- Dynamic caption will be inserted here -->
          </div>

          <!-- Counter -->
          <div id="lightbox-counter" class="mt-2 text-center text-gray-300 text-sm">
            <!-- Dynamic counter will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Custom scrollbar for lightbox */
  #lightbox-modal {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
  }

  #lightbox-modal::-webkit-scrollbar {
    width: 6px;
  }

  #lightbox-modal::-webkit-scrollbar-track {
    background: transparent;
  }

  #lightbox-modal::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }

  /* Focus states */
  [data-gallery-item]:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .group-hover\\:bg-opacity-20 {
      background-opacity: 0.5;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .transition-transform,
    .transition-all,
    .transition-opacity {
      transition: none;
    }

    .group-hover\\:scale-105 {
      transform: none;
    }
  }

  /* Print styles */
  @media print {
    .media-gallery {
      break-inside: avoid;
    }

    [data-gallery-item] {
      break-inside: avoid;
      margin-bottom: 1rem;
    }

    #lightbox-modal {
      display: none !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('[data-gallery-item]');
    const lightboxModal = document.getElementById('lightbox-modal');
    const lightboxContent = document.getElementById('lightbox-content');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = document.getElementById('lightbox-close');
    const lightboxPrev = document.getElementById('lightbox-prev');
    const lightboxNext = document.getElementById('lightbox-next');

    let currentIndex = 0;
    let mediaItems: any[] = [];

    // Extract media items from DOM
    galleryItems.forEach((item, index) => {
      const img = item.querySelector('img, video') as HTMLImageElement | HTMLVideoElement;
      const caption = item.querySelector('.group-hover\\:opacity-100 + div p')?.textContent;

      if (img) {
        mediaItems.push({
          src: img.src,
          alt: (img as HTMLImageElement).alt || `Media item ${index + 1}`,
          caption: caption || '',
          type: img.tagName.toLowerCase() === 'video' ? 'video' : 'image'
        });
      }
    });

    const openLightbox = (index: number) => {
      if (!lightboxModal || !lightboxContent) return;

      currentIndex = index;
      const item = mediaItems[index];

      // Create content
      let content: string;
      if (item.type === 'video') {
        content = `
          <video
            src="${item.src}"
            class="max-w-full max-h-[80vh] object-contain"
            controls
            autoplay
            loop
            muted
          >
            Your browser does not support video playback.
          </video>
        `;
      } else {
        content = `
          <img
            src="${item.src}"
            alt="${item.alt}"
            class="max-w-full max-h-[80vh] object-contain"
            loading="eager"
          />
        `;
      }

      lightboxContent.innerHTML = content;

      // Update caption
      if (lightboxCaption) {
        if (item.caption) {
          lightboxCaption.textContent = item.caption;
          lightboxCaption.classList.remove('hidden');
        } else {
          lightboxCaption.classList.add('hidden');
        }
      }

      // Update counter
      if (lightboxCounter) {
        lightboxCounter.textContent = `${index + 1} / ${mediaItems.length}`;
      }

      // Update navigation buttons
      if (lightboxPrev) {
        (lightboxPrev as any).disabled = index === 0;
      }
      if (lightboxNext) {
        (lightboxNext as HTMLButtonElement).disabled = index === mediaItems.length - 1;
      }

      // Show modal
      lightboxModal.classList.remove('hidden');
      lightboxModal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';

      // Focus management
      lightboxClose?.focus();
    };

    const closeLightbox = () => {
      if (!lightboxModal) return;

      lightboxModal.classList.add('hidden');
      lightboxModal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';

      // Return focus to the gallery item
      const activeItem = galleryItems[currentIndex] as HTMLElement;
      activeItem?.focus();
    };

    const showPrevious = () => {
      if (currentIndex > 0) {
        openLightbox(currentIndex - 1);
      }
    };

    const showNext = () => {
      if (currentIndex < mediaItems.length - 1) {
        openLightbox(currentIndex + 1);
      }
    };

    // Event listeners
    galleryItems.forEach((item, index) => {
      const clickHandler = () => openLightbox(index);

      item.addEventListener('click', clickHandler);

      item.addEventListener('keydown', (e) => {
        if ((e as any).key === 'Enter' || (e as any).key === ' ') {
          e.preventDefault();
          clickHandler();
        }
      });
    });

    // Lightbox controls
    lightboxClose?.addEventListener('click', closeLightbox);
    lightboxPrev?.addEventListener('click', showPrevious);
    lightboxNext?.addEventListener('click', showNext);

    // Click outside to close
    lightboxModal?.addEventListener('click', (e) => {
      if (e.target === lightboxModal) {
        closeLightbox();
      }
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (lightboxModal?.classList.contains('hidden')) return;

      switch (e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          showPrevious();
          break;
        case 'ArrowRight':
          e.preventDefault();
          showNext();
          break;
      }
    });

    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;

    lightboxModal?.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    lightboxModal?.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      const swipeThreshold = 50;

      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe left - next image
        showNext();
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe right - previous image
        showPrevious();
      }
    });

    // Prevent body scroll when modal is open
    const preventScroll = (e: Event) => {
      if (!lightboxModal?.classList.contains('hidden')) {
        e.preventDefault();
      }
    };

    // Performance monitoring
    if ('performance' in window) {
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.name.includes('media-gallery')) {
            console.log(`Gallery image loaded: ${entry.duration.toFixed(2)}ms`);
          }
        });
      });

      observer.observe({ entryTypes: ['resource'] });
    }
  });
</script>