---
/**
 * Button Component for ClearLane Initiative
 * Accessible, responsive button with multiple variants
 */

export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  loading?: boolean;
  fullWidth?: boolean;
  icon?: string;
  iconPosition?: 'left' | 'right';
  className?: string;
  onClick?: string;
  'data-analytics'?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  loading = false,
  fullWidth = false,
  icon,
  iconPosition = 'left',
  className = '',
  onClick,
  'data-analytics': analytics,
  ...rest
} = Astro.props;

// Determine tag type
const Tag = href ? 'a' : 'button';

// Build CSS classes
const baseClasses = [
  'inline-flex items-center justify-center gap-2',
  'font-semibold text-center',
  'border border-transparent',
  'transition-all duration-200',
  'focus:outline-none focus:ring-2 focus:ring-offset-2',
  'disabled:opacity-60 disabled:cursor-not-allowed',
  'print:border print:border-gray-400 print:bg-transparent print:text-black'
];

const variantClasses = {
  primary: [
    'bg-primary text-white',
    'hover:bg-primary-dark',
    'focus:ring-primary',
    'shadow-sm hover:shadow-md'
  ],
  secondary: [
    'bg-secondary text-white',
    'hover:bg-secondary-dark',
    'focus:ring-secondary',
    'shadow-sm hover:shadow-md'
  ],
  outline: [
    'border-primary text-primary bg-transparent',
    'hover:bg-primary hover:text-white',
    'focus:ring-primary',
  ],
  ghost: [
    'text-gray-700 bg-transparent',
    'hover:bg-gray-100',
    'focus:ring-gray-500',
  ],
  danger: [
    'bg-red-600 text-white',
    'hover:bg-red-700',
    'focus:ring-red-500',
    'shadow-sm hover:shadow-md'
  ]
};

const sizeClasses = {
  sm: ['px-3 py-2', 'text-sm', 'rounded-md', 'min-h-[32px]'],
  md: ['px-4 py-2.5', 'text-sm', 'rounded-lg', 'min-h-[40px]'],
  lg: ['px-6 py-3', 'text-base', 'rounded-lg', 'min-h-[44px]'],
  xl: ['px-8 py-4', 'text-lg', 'rounded-xl', 'min-h-[56px]']
};

const allClasses = [
  ...baseClasses,
  ...variantClasses[variant],
  ...sizeClasses[size],
  fullWidth ? 'w-full' : '',
  loading ? 'cursor-wait' : '',
  className
].filter(Boolean).join(' ');

// Component props for the rendered element
const componentProps: any = {
  class: allClasses,
  disabled: disabled || loading,
  'data-analytics': analytics,
  'data-interactive': true,
  ...rest
};

if (href) {
  componentProps.href = href;
  if (href.startsWith('http')) {
    componentProps.target = '_blank';
    componentProps.rel = 'noopener noreferrer';
  }
} else {
  componentProps.type = type;
  if (onClick) {
    componentProps.onclick = onClick;
  }
}
---

<Tag {...componentProps}>
  {loading && (
    <svg
      class="animate-spin -ml-1 mr-2 h-4 w-4"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"
      ></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  )}

  {icon && iconPosition === 'left' && !loading && (
    <span class="inline-block" aria-hidden="true">
      {icon}
    </span>
  )}

  <span class={loading ? 'opacity-70' : ''}>
    <slot />
  </span>

  {icon && iconPosition === 'right' && !loading && (
    <span class="inline-block" aria-hidden="true">
      {icon}
    </span>
  )}

  {/* Screen reader content for loading state */}
  {loading && (
    <span class="sr-only">Loading...</span>
  )}
</Tag>

<style>
  /* Custom button enhancements */
  button, a {
    /* Ensure buttons have proper touch targets on mobile */
    min-height: 44px;
    min-width: 44px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    button, a {
      border-width: 2px !important;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    button, a {
      transition: none !important;
    }

    .animate-spin {
      animation: none !important;
    }
  }

  /* Print styles */
  @media print {
    button, a {
      background: transparent !important;
      color: black !important;
      border: 1px solid black !important;
      box-shadow: none !important;
    }
  }
</style>

<script>
  // Enhanced button interactions
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button, a[data-interactive]');

    buttons.forEach(button => {
      // Add ripple effect for touch feedback
      button.addEventListener('click', (e) => {
        if (button.hasAttribute('disabled') || button.classList.contains('disabled')) {
          e.preventDefault();
          return;
        }

        // Analytics tracking
        const analyticsData = button.getAttribute('data-analytics');
        if (analyticsData && typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'button_click', {
            button_text: button.textContent?.trim(),
            button_variant: analyticsData
          });
        }

        // Ripple effect (only if animations are enabled)
        if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
          addRippleEffect(button, e as MouseEvent);
        }
      });

      // Enhanced keyboard support
      button.addEventListener('keydown', (e) => {
        if ((e as KeyboardEvent).key === 'Enter' || (e as KeyboardEvent).key === ' ') {
          e.preventDefault();

          // Visual feedback
          button.classList.add('active');
          setTimeout(() => {
            button.classList.remove('active');
          }, 150);

          // Trigger click
          (button as HTMLElement).click();
        }
      });
    });

    function addRippleEffect(element: Element, event: MouseEvent) {
      const ripple = document.createElement('span');
      const rect = element.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = event.clientX - rect.left - size / 2;
      const y = event.clientY - rect.top - size / 2;

      ripple.style.cssText = `
        position: absolute;
        width: ${size}px;
        height: ${size}px;
        left: ${x}px;
        top: ${y}px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        transform: scale(0);
        animation: ripple 600ms linear;
        pointer-events: none;
        z-index: 10;
      `;

      // Ensure parent has relative positioning
      const computedStyle = window.getComputedStyle(element);
      if (computedStyle.position === 'static') {
        (element as HTMLElement).style.position = 'relative';
      }

      // Add overflow hidden to contain ripple
      (element as HTMLElement).style.overflow = 'hidden';

      element.appendChild(ripple);

      ripple.addEventListener('animationend', () => {
        element.removeChild(ripple);
      });
    }
  });

  // Add CSS for ripple animation
  if (!document.getElementById('button-animations')) {
    const style = document.createElement('style');
    style.id = 'button-animations';
    style.textContent = `
      @keyframes ripple {
        to {
          transform: scale(4);
          opacity: 0;
        }
      }

      button.active,
      a.active {
        transform: scale(0.98);
      }
    `;
    document.head.appendChild(style);
  }
</script>