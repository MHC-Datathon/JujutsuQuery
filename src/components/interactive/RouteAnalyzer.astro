---
/**
 * Personal Route Analyzer - Interactive tool for users to explore their commute
 * Core engagement tool for "Rolling Study Hall" narrative
 */

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;

// Sample routes for demonstration
const sampleRoutes = [
  'BxM10', 'M15', 'B46', 'Q44+', 'M79+', 'B26', 'M42', 'BX28', 'M101'
];

// CUNY campuses for route suggestions
const cunyOptions = [
  'Hunter College',
  'City College',
  'Baruch College',
  'Brooklyn College',
  'Queens College',
  'John Jay College',
  'Lehman College',
  'College of Staten Island'
];
---

<div id="route-analyzer" class={`route-analyzer ${className}`}>
  <div class="mb-6">
    <h3 class="text-xl font-bold text-gray-900 mb-2">Analyze Your Commute Impact</h3>
    <p class="text-gray-600">Enter your bus route and commute times to see how violations affect your journey and study time.</p>
  </div>
  <div class="analyzer-container">
    <!-- Input Form -->
    <form id="route-form" class="route-form" novalidate>
      <fieldset class="input-group">
        <legend>Tell us about your commute</legend>

        <!-- Route Selection -->
        <div class="field-group">
          <label for="bus-route">
            Primary Bus Route
            <span class="required" aria-label="required">*</span>
          </label>
          <div class="input-wrapper">
            <input
              type="text"
              id="bus-route"
              name="busRoute"
              list="route-suggestions"
              placeholder="e.g., BxM10, M15, B46"
              required
              aria-describedby="route-help"
              autocomplete="off"
            />
            <datalist id="route-suggestions">
              {sampleRoutes.map(route => (
                <option value={route}>{route}</option>
              ))}
            </datalist>
          </div>
          <small id="route-help" class="help-text">
            Enter your main bus route (check your MetroCard app)
          </small>
        </div>

        <!-- Destination -->
        <div class="field-group">
          <label for="destination">
            Destination
            <span class="required" aria-label="required">*</span>
          </label>
          <select
            id="destination"
            name="destination"
            required
            aria-describedby="destination-help"
          >
            <option value="">Select your destination</option>
            <optgroup label="CUNY Campuses">
              {cunyOptions.map(campus => (
                <option value={campus}>{campus}</option>
              ))}
            </optgroup>
            <optgroup label="Other Destinations">
              <option value="work">Work/Job</option>
              <option value="other-school">Other School</option>
              <option value="other">Other</option>
            </optgroup>
          </select>
          <small id="destination-help" class="help-text">
            Where do you usually go on this route?
          </small>
        </div>

        <!-- Commute Times -->
        <div class="field-group">
          <label>
            Typical Commute Times
            <span class="required" aria-label="required">*</span>
          </label>
          <div class="time-inputs">
            <div class="time-field">
              <label for="departure-time">Departure Time</label>
              <input
                type="time"
                id="departure-time"
                name="departureTime"
                required
                aria-describedby="time-help"
              />
            </div>
            <div class="time-field">
              <label for="days">Days per Week</label>
              <select id="days" name="daysPerWeek" required>
                <option value="">Select</option>
                <option value="5">Monday-Friday (5 days)</option>
                <option value="4">4 days per week</option>
                <option value="3">3 days per week</option>
                <option value="2">2 days per week</option>
                <option value="1">1 day per week</option>
              </select>
            </div>
          </div>
          <small id="time-help" class="help-text">
            When do you usually catch this bus?
          </small>
        </div>

        <!-- Academic Schedule -->
        <div class="field-group">
          <label>
            <input
              type="checkbox"
              id="is-student"
              name="isStudent"
              value="true"
            />
            I use this commute for studying (rolling study hall)
          </label>
        </div>
      </fieldset>

      <!-- Submit Button -->
      <div class="form-actions">
        <button
          type="submit"
          class="analyze-button"
          id="analyze-button"
        >
          <span class="button-text">Analyze My Route</span>
          <span class="button-spinner" aria-hidden="true"></span>
        </button>
      </div>
    </form>

    <!-- Results Display -->
    <div id="analysis-results" class="results-container" hidden>
      <div class="results-content">
        <h3>Your Commute Impact Analysis</h3>

        <!-- Key Statistics -->
        <div class="stats-grid">
          <div class="stat-card" id="violation-exposure">
            <div class="stat-number">--</div>
            <div class="stat-label">Violations Per Week</div>
            <div class="stat-description">On your route during your commute time</div>
          </div>

          <div class="stat-card" id="time-lost">
            <div class="stat-number">--</div>
            <div class="stat-label">Minutes Lost Weekly</div>
            <div class="stat-description">Due to bus lane blockages</div>
          </div>

          <div class="stat-card" id="study-impact" hidden>
            <div class="stat-number">--</div>
            <div class="stat-label">Study Sessions Disrupted</div>
            <div class="stat-description">Your rolling study hall interrupted</div>
          </div>

          <div class="stat-card" id="semester-impact" hidden>
            <div class="stat-number">--</div>
            <div class="stat-label">Hours Lost Per Semester</div>
            <div class="stat-description">Total academic time lost to delays</div>
          </div>
        </div>

        <!-- Personalized Insights -->
        <div class="insights-section">
          <h4>Key Findings for Your Route</h4>
          <div id="route-insights" class="insights-list">
            <!-- Dynamic insights populated by JavaScript -->
          </div>
        </div>

        <!-- Action Recommendations -->
        <div class="actions-section">
          <h4>Take Action</h4>
          <div class="action-buttons">
            <button
              type="button"
              id="contact-officials"
              class="action-button primary"
            >
              📧 Contact MTA Officials
            </button>
            <button
              type="button"
              id="share-story"
              class="action-button secondary"
            >
              📱 Share Your Story
            </button>
            <button
              type="button"
              id="join-campaign"
              class="action-button secondary"
            >
              👥 Join ClearLane Campaign
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Display -->
    <div id="analysis-error" class="error-message" hidden role="alert">
      <h3>Analysis Unavailable</h3>
      <p id="error-text">Sorry, we couldn't analyze your route right now.</p>
      <button type="button" id="retry-button" class="retry-button">
        Try Again
      </button>
    </div>
  </div>
</div>

<style>
  .route-analyzer {
    --primary-color: #2563eb;
    --secondary-color: #64748b;
    --success-color: #059669;
    --warning-color: #d97706;
    --danger-color: #dc2626;
  }

  .analyzer-container {
    max-width: 800px;
    margin: 0 auto;
  }

  /* Form Styles */
  .route-form {
    background: var(--color-gray-50);
    padding: 2rem;
    border-radius: 8px;
    margin-bottom: 2rem;
  }

  .input-group {
    border: none;
    margin: 0;
    padding: 0;
  }

  .input-group legend {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--color-text-primary);
  }

  .field-group {
    margin-bottom: 1.5rem;
  }

  .field-group label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .required {
    color: var(--danger-color);
    font-weight: normal;
  }

  .input-wrapper {
    position: relative;
  }

  .field-group input[type="text"],
  .field-group select,
  .field-group input[type="time"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .field-group input:focus,
  .field-group select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .help-text {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: var(--secondary-color);
  }

  /* Time inputs */
  .time-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .time-field label {
    font-size: 0.9rem;
    font-weight: normal;
  }

  /* Checkbox styling */
  .field-group input[type="checkbox"] {
    margin-right: 0.5rem;
    transform: scale(1.2);
  }

  /* Form actions */
  .form-actions {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }

  .analyze-button {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 6px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
    min-width: 200px;
    justify-content: center;
  }

  .analyze-button:hover:not(:disabled) {
    background: #1d4ed8;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(37, 99, 235, 0.3);
  }

  .analyze-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .button-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: none;
  }

  .analyze-button.loading .button-spinner {
    display: block;
  }

  .analyze-button.loading .button-text {
    opacity: 0.7;
  }

  /* Results Styles */
  .results-container {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  .results-content h3 {
    margin: 0 0 2rem 0;
    font-size: 1.5rem;
    color: var(--color-text-primary);
    text-align: center;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: var(--color-gray-50);
    padding: 1.5rem;
    border-radius: 6px;
    text-align: center;
    border: 1px solid var(--color-border);
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-weight: 600;
    color: var(--color-text-primary);
    margin-bottom: 0.25rem;
  }

  .stat-description {
    font-size: 0.9rem;
    color: var(--secondary-color);
  }

  /* Insights */
  .insights-section,
  .actions-section {
    margin-bottom: 2rem;
  }

  .insights-section h4,
  .actions-section h4 {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    color: var(--color-text-primary);
  }

  .insights-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .insight-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--color-gray-50);
    border-radius: 4px;
    border-left: 4px solid var(--primary-color);
  }

  .insight-icon {
    flex-shrink: 0;
    font-size: 1.2rem;
  }

  .insight-text {
    color: var(--color-text-primary);
    line-height: 1.5;
  }

  /* Action buttons */
  .action-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .action-button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
    text-decoration: none;
  }

  .action-button.primary {
    background: var(--primary-color);
    color: white;
  }

  .action-button.primary:hover {
    background: #1d4ed8;
  }

  .action-button.secondary {
    background: var(--color-gray-100);
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);
  }

  .action-button.secondary:hover {
    background: var(--color-gray-200);
  }

  /* Error styles */
  .error-message {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 6px;
    padding: 2rem;
    text-align: center;
    color: var(--danger-color);
  }

  .error-message h3 {
    margin: 0 0 1rem 0;
  }

  .retry-button {
    background: var(--danger-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 1rem;
  }

  .retry-button:hover {
    background: #b91c1c;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .route-form {
      padding: 1rem;
    }

    .time-inputs {
      grid-template-columns: 1fr;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }

    .action-buttons {
      flex-direction: column;
    }

    .action-button {
      justify-content: center;
    }
  }

  /* Animation */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  /* Focus management for screen readers */
  [hidden] {
    display: none !important;
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .stat-card,
    .insight-item {
      border: 2px solid;
    }
  }
</style>

<script>
  // Data loading functions (inlined from csv-loader.ts)
  async function loadHourlyData() {
    try {
      const response = await fetch('/data/insights/hourly_agg.csv');
      const csvText = await response.text();
      return parseCSV(csvText, (row) => ({
        weekday: row.weekday || '',
        hour: parseInt(row.hour) || 0,
        violations: parseInt(row.violations) || 0,
      }));
    } catch (error) {
      console.error('Failed to load hourly data:', error);
      return [];
    }
  }

  function parseCSV(csvText, parser) {
    const lines = csvText.trim().split('\n');
    const headers = lines[0].split(',').map(h => h.trim());

    return lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim());
      const row = headers.reduce((obj, header, index) => {
        obj[header] = values[index];
        return obj;
      }, {});

      return parser(row);
    }).filter(Boolean);
  }

  class DataAggregator {
    static getStudentCommuteData(data) {
      return data.filter(item =>
        item.hour >= 7 && item.hour <= 10 &&
        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].includes(item.weekday)
      );
    }
  }

  class RouteAnalyzer {
    constructor() {
      this.form = document.getElementById('route-form');
      this.resultsContainer = document.getElementById('analysis-results');
      this.errorContainer = document.getElementById('error-container');
      this.hourlyData = [];
      this.init();
    }

    async init() {
      await this.loadData();
      this.attachEventListeners();
    }

    async loadData() {
      try {
        this.hourlyData = await loadHourlyData();
      } catch (error) {
        console.error('Failed to load route analysis data:', error);
      }
    }

    attachEventListeners() {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));

      // Real-time validation
      this.form.querySelectorAll('input, select').forEach(field => {
        field.addEventListener('blur', () => this.validateField(field));
      });

      // Retry button
      document.getElementById('retry-button')?.addEventListener('click', () => {
        this.hideError();
        this.form.scrollIntoView({ behavior: 'smooth' });
      });

      // Action buttons
      document.getElementById('contact-officials')?.addEventListener('click', () => {
        this.handleContactOfficials();
      });

      document.getElementById('share-story')?.addEventListener('click', () => {
        this.handleShareStory();
      });

      document.getElementById('join-campaign')?.addEventListener('click', () => {
        this.handleJoinCampaign();
      });
    }

    async handleSubmit(e) {
      e.preventDefault();

      if (!this.validateForm()) {
        return;
      }

      this.showLoading();

      try {
        const formData = new FormData(this.form);
        const analysis = await this.performAnalysis(formData);
        this.displayResults(analysis);
      } catch (error) {
        this.showError('Unable to analyze your route. Please try again.');
      } finally {
        this.hideLoading();
      }
    }

 validateForm(): boolean {
      let isValid = true;
      const requiredFields = this.form.querySelectorAll('[required]');

      requiredFields.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });

      return isValid;
    }

    validateField(field) {
      const isValid = field.checkValidity();

      // Remove existing error styling
      field.classList.remove('error');

      // Add error styling if invalid
      if (!isValid) {
        field.classList.add('error');
      }

      return isValid;
    }

    async performAnalysis(formData) {
      const busRoute = formData.get('busRoute');
      const destination = formData.get('destination');
      const departureTime = formData.get('departureTime');
      const daysPerWeek = parseInt(formData.get('daysPerWeek'));
      const isStudent = formData.get('isStudent') === 'true';

      // Extract hour from departure time
      const hour = parseInt(departureTime.split(':')[0]);

      // Calculate analysis based on loaded data
      const relevantData = this.hourlyData.filter(d =>
        d.hour >= hour - 1 && d.hour <= hour + 1 &&
        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].includes(d.weekday)
      );

      const avgViolationsPerHour = relevantData.length > 0
        ? relevantData.reduce((sum, d) => sum + d.violations, 0) / relevantData.length
        : 150; // Fallback estimate

      const violationsPerWeek = Math.round(avgViolationsPerHour * daysPerWeek);
      const minutesLostWeekly = Math.round(violationsPerWeek * 2.3); // Estimate 2.3 minutes per violation

      return {
        busRoute,
        destination,
        departureTime,
        daysPerWeek,
        isStudent,
        violationsPerWeek,
        minutesLostWeekly,
        studySessionsDisrupted: isStudent ? Math.round(violationsPerWeek * 0.6) : 0,
        semesterHoursLost: isStudent ? Math.round(minutesLostWeekly * 16 / 60) : 0,
        insights: this.generateInsights(busRoute, violationsPerWeek, minutesLostWeekly, isStudent)
      };
    }

 generateInsights(route: string, violations: number, minutesLost: number, isStudent: boolean) {
      const insights = [];

      if (violations > 100) {
        insights.push({
          icon: '🚨',
          text: `Your ${route} route experiences high violation activity (${violations} per week). This is significantly above the city average.`
        });
      }

      if (minutesLost > 60) {
        insights.push({
          icon: '⏰',
          text: `You lose ${minutesLost} minutes weekly to bus delays - that's ${Math.round(minutesLost * 52 / 60)} hours per year.`
        });
      }

      if (isStudent) {
        insights.push({
          icon: '📚',
          text: `As a student, these delays directly impact your "rolling study hall" time and academic productivity.`
        });
      }

      insights.push({
        icon: '💡',
        text: `ClearLane targeted enforcement could reduce these delays by up to 40% with focused intervention.`
      });

      return insights;
    }

 displayResults(analysis: any) {
      // Update statistics
      this.updateStat('violation-exposure', analysis.violationsPerWeek);
      this.updateStat('time-lost', analysis.minutesLostWeekly);

      if (analysis.isStudent) {
        this.updateStat('study-impact', analysis.studySessionsDisrupted);
        this.updateStat('semester-impact', analysis.semesterHoursLost);
        document.getElementById('study-impact')?.removeAttribute('hidden');
        document.getElementById('semester-impact')?.removeAttribute('hidden');
      }

      // Display insights
      const insightsList = document.getElementById('route-insights')!;
      insightsList.innerHTML = analysis.insights.map((insight: any) => `
        <div class="insight-item">
          <span class="insight-icon" aria-hidden="true">${insight.icon}</span>
          <span class="insight-text">${insight.text}</span>
        </div>
      `).join('');

      // Show results
      this.resultsContainer.removeAttribute('hidden');
      this.resultsContainer.scrollIntoView({ behavior: 'smooth' });

      // Store analysis data for action buttons
      window.currentAnalysis = analysis;
    }

    updateStat(statId, value) {
      const statElement = document.getElementById(statId);
      const numberElement = statElement?.querySelector('.stat-number');

      if (numberElement) {
        // Animate the number
        this.animateNumber(numberElement, 0, value, 1000);
      }
    }

    animateNumber(element, start, end, duration) {
      const startTime = performance.now();

      const animate = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        const current = Math.round(start + (end - start) * progress);
        element.textContent = current.toLocaleString();

        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };

      requestAnimationFrame(animate);
    }

 showLoading() {
      const button = document.getElementById('analyze-button')!;
      button.classList.add('loading');
      (button).disabled = true;
    }

 hideLoading() {
      const button = document.getElementById('analyze-button')!;
      button.classList.remove('loading');
      (button).disabled = false;
    }

 showError(message: string) {
      this.hideResults();
      document.getElementById('error-text')!.textContent = message;
      this.errorContainer.removeAttribute('hidden');
      this.errorContainer.scrollIntoView({ behavior: 'smooth' });
    }

 hideError() {
      this.errorContainer.setAttribute('hidden', '');
    }

 hideResults() {
      this.resultsContainer.setAttribute('hidden', '');
    }

    // Action handlers
 handleContactOfficials() {
      const analysis = window.currentAnalysis;
      if (!analysis) return;

      // Generate pre-filled contact form
      const subject = `ClearLane: Improve ${analysis.busRoute} Route Enforcement`;
      const body = `Dear MTA Officials,

I am a regular rider of the ${analysis.busRoute} route to ${analysis.destination}.

Based on data analysis, this route experiences ${analysis.violationsPerWeek} violations per week during my commute time, causing me to lose ${analysis.minutesLostWeekly} minutes weekly.

${analysis.isStudent ? 'As a student, I depend on bus reliability for my academic success. These delays disrupt my "rolling study hall" time.' : ''}

I support the ClearLane Initiative's targeted enforcement approach to address these specific hotspots.

Please consider implementing focused enforcement during peak hours on routes serving students and workers.

Thank you for your attention to this matter.`;

      // Open email client or show contact modal
      window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    }

 handleShareStory() {
      // Social sharing functionality
      const analysis = window.currentAnalysis;
      if (!analysis) return;

      const shareText = `My ${analysis.busRoute} bus route has ${analysis.violationsPerWeek} violations per week, costing me ${analysis.minutesLostWeekly} minutes of study time. Support #ClearLane targeted enforcement! 🚌📚`;
      const shareUrl = window.location.href;

      if (navigator.share) {
        navigator.share({
          title: 'ClearLane: My Commute Analysis',
          text: shareText,
          url: shareUrl
        });
      } else {
        // Fallback: copy to clipboard
        navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
        this.showToast('Share text copied to clipboard!');
      }
    }

 handleJoinCampaign() {
      // Redirect to campaign signup
      window.open('#join-campaign', '_blank');
    }

 showToast(message: string) {
      // Simple toast notification
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.textContent = message;
      toast.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: var(--success-color);
        color: white;
        padding: 1rem;
        border-radius: 4px;
        z-index: 1000;
      `;

      document.body.appendChild(toast);

      setTimeout(() => {
        document.body.removeChild(toast);
      }, 3000);
    }
  }

  // Initialize when DOM loads
  document.addEventListener('DOMContentLoaded', () => {
    new RouteAnalyzer();
  });
</script>

<style is:global>
  .field-group input.error,
  .field-group select.error {
    border-color: var(--danger-color);
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
  }
</style>